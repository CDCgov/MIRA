[{"path":[]},{"path":"https://github.com/nbx0/iSpy/articles/docker.html","id":"requirements","dir":"Articles","previous_headings":"Dockerize SeqSender Pipeline","what":"Requirements","title":"","text":"Docker version >= 18 Git version >= 2.21.0","code":""},{"path":"https://github.com/nbx0/iSpy/articles/docker.html","id":"clone-this-respitory","dir":"Articles","previous_headings":"Dockerize SeqSender Pipeline","what":"(1) Clone this respitory","title":"","text":"","code":"git clone https://github.com/CDCgov/seqsender.git"},{"path":"https://github.com/nbx0/iSpy/articles/docker.html","id":"cd-to-seqsender-folder-where-dockerfile-file-is-stored-and-build-the-docker-image-","dir":"Articles","previous_headings":"Dockerize SeqSender Pipeline","what":"(2) CD to seqsender folder where Dockerfile file is stored and build the docker image.","title":"","text":"NOTE: Dockerfile contains list instructions steps build run seqsender pipeline. -t: add tag image version application, e.g. seqsender:1.0.0 seqsender:latest image took approximately < 1 min build","code":"docker build -t seqsender:1.0.0 ."},{"path":"https://github.com/nbx0/iSpy/articles/docker.html","id":"after-the-build-is-completed-you-can-check-if-the-image-is-built-successfully","dir":"Articles","previous_headings":"Dockerize SeqSender Pipeline","what":"(3) After the build is completed, you can check if the image is built successfully","title":"","text":"","code":"docker images  REPOSITORY    TAG       IMAGE ID        CREATED        SIZE seqsender     1.0.0     d9e2578d2211    2 weeks ago    1.07GB"},{"path":"https://github.com/nbx0/iSpy/articles/docker.html","id":"see-a-list-of-commands-in-seqsender","dir":"Articles","previous_headings":"Dockerize SeqSender Pipeline","what":"(4) See a list of commands in seqsender","title":"","text":"-t: allocate pseudo-tty -: keep STDIN open even attached -h, –help: show help messages exit list commands seqsender: run individual command seqsender: -t: allocate pseudo-tty -: keep STDIN open even attached -v: mount code base data files host directory container directory [host_div]:[container_dir]. exposing host directory docker container, docker able access data files within mounted directory use run seqsender pipeline. information Docker syntax, see Docker run reference","code":"docker run -it seqsender:1.0.0 --help To create the files for submission and adds to automated submission pipeline and starts submission process:   Usage: seqsender submit [-h] --unique_name <> --fasta <> --metadata <> [--config <>] [--test] [--overwrite]  To create the files for submission:   Usage: seqsender prep [-h] --unique_name <> --fasta <> --metadata <> [--config <>] [--test] [--overwrite]  To update process of all sequences in submission pipeline, performs submission to subsequent databases based on submission status:   Usage: seqsender update_submissions [-h]  To output BioProject ID needed to perform test submissions:   Usage: seqsender test_bioproject [-h] --unique_name <> [--config <>]  To perform manual submission to GISAID:   Usage: seqsender gisaid [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to Genbank:   Usage: seqsender genbank [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to BioSample:   Usage: seqsender biosample [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to SRA:   Usage: seqsender sra [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to BioSample/SRA:   Usage: seqsender biosample_sra [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To authenticate GISAID submissions:   Usage: gisaid_uploader [-h] [--proxy <>] [--debug] [--version] [-a AUTHFILE] [-t AUTHTOKEN] [-l LOGFILE] ctx {authenticate,upload,revoke} ...  To retrieve a sample file used by seqsender to submit submissions such as config file, metadata file, and required columns file.   Usage: retrieve --sample_file <> [--outdir <>]  To check status of a submission:   Usage: check --unique_name <>  Required flags:   --unique_name <>        Unique identifier   --metadata <>           Metadata file   --fasta <>              Fasta file   --sample_file <>        Name of a file to retrieve: config/metadata/required_columns   Optional flags:   -h, --help      Show help messages and exit.   --config <>     If using a different config file than the default config.                    Provide the full name of the config file stored in config_files folder.   --test          Performs test submission to NCBI. Does not perform test submission to GISAID.                    You must used authenticated CID for test submission to GISAID.   --overwrite     Overwrites an existing submission on NCBI FTP. Used to update errored submissions.   --outdir <>     The output directory to return the file to docker run -v [host_dir]:[container_dir] -it seqsender:1.0.0 seqsender [-h, --help]                                                              seqsender submit [-h, --help] ...                                                              seqsender prep [-h, --help] ...                                                              seqsender update_submissions [-h, --help] ...                                                              etc."},{"path":"https://github.com/nbx0/iSpy/articles/docker.html","id":"run-seqsender-using-provided-datasets","dir":"Articles","previous_headings":"Dockerize SeqSender Pipeline","what":"(5) Run seqsender using provided datasets","title":"","text":"First, make sure /path//seqsender set present working directory. , cd directory. Within seqsender directory, test_input config_files subfolders contain files needed run seqsender pipeline. seqsender pipeline ultilize files automatically generate necessary files upload via FTP NCBI’s databases, Genbank, BioSample, SRA, well , GISAID. NOTE: instructions document attempts submit submissions “NCBI’s Test server” using --test flag. production submissions, please remove flag. . Finish setting config file Open test config yaml “config_files/test_config.yaml”. user specific fields must added finalize setup file.   ii. Finish setting metadata file finished setting test config yaml, two fields “test_input/test_metadata.tsv” must updated: sra_file_path_1, sra_file_path_2. Open file update sra file path’s give relative path test input fastq’s related current working directory. NOTE: use absolute paths Docker full access machine. Docker can access files within mounted directory, e.g. /path//seqsender iii. Initialize scripts submission can submitted, couple initialization steps must completed. create production BioProject, must completed GUI NCBI. test submissions, Bioproject must created FTP test server. create , run command . running , wait around ~5 minutes run command . script output test BioProject ID needed perform test submissions. NOTE: Change /path//seqsender path local seqsender directory use relative paths files within mounted directory, e.g. /path//seqsender receiving test BioProject ID, must add “test_config.yaml”  Next, GISAID submitter must authenticated. authenticate, run command . ask input client-id, provide TEST client ID (e.g. TEST-EA76875B00C3), followed GISAID account username password. iv. Prep submissions can perform submission, can first run “prep” command. generate files necessary submission ensure everything completed correctly. NOTE: Change /path//seqsender path local seqsender directory use relative paths files within mounted directory, e.g. /path//seqsender v. Perform submissions ensuring prep script worked correctly, can begin submitting test server public databases. submit NCBI’s test server, run following command. submit SRA BioSample. submission process completed. NOTE: Change /path//seqsender path local seqsender directory use relative paths files within mounted directory, e.g. /path//seqsender submit GISAID test server, run following command. Upon completion, error submission complete. NOTE: Change /path//seqsender path local seqsender directory use relative paths files within mounted directory, e.g. /path//seqsender vi. Update submissions check submission process NCBI’s test server, run following command. update status database. BioSample processed submit Genbank test submission automatically. command can ran often needed till completed. NOTE: Change /path//seqsender path local seqsender directory use relative paths files within mounted directory, e.g. /path//seqsender submissions complete ready start performing production submissions databases. Contact database intend submit let know successfully performed test submission begin submitting production submissions.  questions issues? Please report github issues","code":"docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender test_bioproject --unique_name test_submission --config config_files/test_config.yaml    Submission reports exists pulling down. Test BioProject ID is: <some_bioproject_id> docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender test_bioproject --unique_name test_submission --config ./config_files/test_config.yaml    Submission reports exists pulling down. Test BioProject ID is: <some_bioproject_id> docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 gisaid_uploader COV authenticate  Enter Client-id: TEST-EA76875B00C3 Enter Username: <enter your GISAID username> Enter Password: <enter your GISAID password> docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender prep --unique_name test_submission --config config_files/test_config.yaml --metadata test_input/test_metadata.tsv --fasta test_input/test_fasta.fasta --test docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender prep --unique_name test_submission --config ./config_files/test_config.yaml --metadata ./test_input/test_metadata.tsv --fasta ./test_input/test_fasta.fasta --test docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender submit --unique_name test_submission --config config_files/test_config.yaml --metadata test_input/test_metadata.tsv --fasta test_input/test_fasta.fasta --test docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender submit --unique_name test_submission --config ./config_files/test_config.yaml --metadata ./test_input/test_metadata.tsv --fasta ./test_input/test_fasta.fasta --test docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender gisaid --unique_name test_submission --config config_files/test_config.yaml --test docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender gisaid --unique_name test_submission --config ./config_files/test_config.yaml docker run -v /path/to/seqsender/:/submissions-pipeline/ -it seqsender:1.0.0 seqsender update_submissions"},{"path":[]},{"path":"https://github.com/nbx0/iSpy/articles/home.html","id":"interactive-dashboard-for-influenza-genome-and-sars-cov-2-spike-gene-assembly-and-curation","dir":"Articles","previous_headings":"iSpy","what":"Interactive Dashboard for Influenza Genome and SARS-CoV-2 Spike-Gene Assembly and Curation","title":"","text":"Version: 0.1 (Beta) Beta version pipeline currently Beta testing issuesc appear submission, use risk. Feedback suggestions welcome! General disclaimer repository created use CDC programs collaborate public health related projects support CDC mission. GitHub hosted CDC, third party website used CDC partners share information collaborate software. CDC use GitHub imply endorsement one particular service, product, enterprise.","code":""},{"path":"https://github.com/nbx0/iSpy/articles/home.html","id":"overview","dir":"Articles","previous_headings":"iSpy","what":"Overview","title":"","text":"iSpy interactive dashboard created using Dash, python framework written top Flask, Plotly.js React.js. iSpy’s dashboard allows users interactively create metadata config file Influenza Genome SARS-CoV-2 Spike-Gene Assembly. Subsequently, generate files necessary upload via FTP NCBI’s databases Genbank, BioSample, SRA, well , GISAID.","code":""},{"path":[]},{"path":"https://github.com/nbx0/iSpy/articles/singularity.html","id":"requirements","dir":"Articles","previous_headings":"Convert Docker Images to Singularity Images and use it on any Linux machines","what":"Requirements","title":"","text":"singularity version >= 2.1 (need install Docker machine) example, use existing “seqsender:1.0.0” docker image created Dockerize SeqSender Pipeline convert singularity image use Linux VMs runs singularity. 1. Find Docker image ID 2. Create tarball Docker image. example, seqsender:1.0.0 IMAGE ID d9e2578d2211, can create tarball using docker save command. explore contents tarball: NOTE: “tarball” Docker-format image comprised multiple layers along metadata JSON manifest. 3. Copy tarball remote VM using File Transfer Protocols (scp used ) 4. SSH remote server 5. Check singularity installed server singularity installed, check installation article 6. Convert tarball Singularity image. Change /path//seqsender-v1.0.0.tar path tarball stored VM NOTE: docker part URI appended archive. ensures Singularity seek Docker-format image archive stored locally seqsender-v1.0.0.tar boostrap conversion process SIF, opposed attempting retrieve image remotely hosted via Docker Hub. Important Note: default, Singularity create set folders $HOME directory docker layers, Cloud library images, metadata, respectively. want cache different directory, set SINGULARITY_CACHEDIR desired path. using -E option sudo command, SINGULARITY_CACHEDIR passed along root’s environment respected build. Remember run commands root images cached root’s home /root user’s home. See singularity build details. 7. see list commands seqsender-v1.0.0 singularity image NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine -t: allocate pseudo-tty -: keep STDIN open even attached -h, –help: show help messages exit list commands seqsender: run individual command seqsender: NOTE: Must sure use –writable-tmpfs flag allow pipeline read provided files perform submission process write required logs xml files back . –writable-tmpfs stores changes -memory temporary filesystem discarded soon container finishes executing. 8. run seqsender singularity image using provided datasets. Clone repository remote server 9. cd seqsender directory data files stored 10. Run “seqsender-v1.0.0” singularity image using provided datasets stored seqsender/config_files seqsender/test_input subfolders NOTE: can perform sequential uploads via FTP NCBI’s databases, Genbank, BioSample, SRA, well , GISAID, need edit config file specifies databases like upload allow possible metadata fields using YAML pair database’s metadata fields personalized metadata fields . Finish setting config file Open test config yaml “test_config.yaml”. user specific fields must added finalize setup file.   ii. Finish setting metadata File finished setting test config yaml, two fields “test_input/test_metadata.tsv” must updated: sra_file_path_1, sra_file_path_2. Open file update sra file path’s give full path test input fastq’s. iii. Initialize Scripts submission can submitted, couple initialization steps must completed. create production BioProject, must completed GUI NCBI. test submissions, Bioproject must created FTP test server. create , run command . running , wait around ~5 minutes run command . script output test BioProject ID needed perform test submissions. NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine use –writable-tmpfs flag receiving test BioProject ID must add “test_config.yaml”  Next, GISAID submitter must authenticated. authenticate, run command . ask input client-id, provide TEST client ID (e.g. TEST-EA76875B00C3), followed GISAID account username password. NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine use –writable-tmpfs flag iv. Prep submissions can perform submission, can first run “prep” command. generate files necessary submission ensure everything completed correctly. NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine use –writable-tmpfs flag v. Perform submissions ensuring prep script worked correctly can begin submitting test server public databases. submit NCBI’s test server’s run following command. submit SRA BioSample. submission process completed. NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine use –writable-tmpfs flag submit GISAID test server run following command. Upon completion error submission complete. NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine use –writable-tmpfs flag check submission process NCBI’s test server run following command. update status database. BioSample processed submit Genbank test submission automatically. command can ran often needed till completed. NOTE: Change /path//seqsender-v1.0.0.sif path seqsender-v1.0.0.sif stored machine use –writable-tmpfs flag vi. Update submissions submissions complete ready start performing production submissions databases. Contact database intend submit let know successfully performed test submission begin submitting production submissions.  questions issues? Please report github issues","code":"docker images  REPOSITORY    TAG       IMAGE ID        CREATED        SIZE seqsender     1.0.0     d9e2578d2211    2 weeks ago    1.07GB docker save d9e2578d2211 -o seqsender-v1.0.0.tar tar tvf seqsender-v1.0.0.tar scp seqsender-v1.0.0.tar remote_user@remote_server_ip:<remote_home_directory> ssh remote_user@remote_server_ip singularity --version  singularity version 3.8.7-1.el8 singularity build seqsender-v1.0.0.sif docker-archive:///path/to/seqsender-v1.0.0.tar singularity run /path/to/seqsender-v1.0.0.sif --help To create the files for submission and adds to automated submission pipeline and starts submission process:   Usage: seqsender submit [-h] --unique_name <> --fasta <> --metadata <> [--config <>] [--test] [--overwrite]  To create the files for submission:   Usage: seqsender prep [-h] --unique_name <> --fasta <> --metadata <> [--config <>] [--test] [--overwrite]  To update process of all sequences in submission pipeline, performs submission to subsequent databases based on submission status:   Usage: seqsender update_submissions [-h]  To output BioProject ID needed to perform test submissions:   Usage: seqsender test_bioproject [-h] --unique_name <> [--config <>]  To perform manual submission to GISAID:   Usage: seqsender gisaid [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to Genbank:   Usage: seqsender genbank [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to BioSample:   Usage: seqsender biosample [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to SRA:   Usage: seqsender sra [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To perform manual submission to BioSample/SRA:   Usage: seqsender biosample_sra [-h] --unique_name <> [--config <>] [--test] [--overwrite]  To authenticate GISAID submissions:   Usage: gisaid_uploader [-h] [--proxy <>] [--debug] [--version] [-a AUTHFILE] [-t AUTHTOKEN] [-l LOGFILE] ctx {authenticate,upload,revoke} ...  To retrieve a sample file used by seqsender to submit submissions such as config file, metadata file, and required columns file.   Usage: retrieve --sample_file <> [--outdir <>]  To check status of a submission:   Usage: check --unique_name <>  Required flags:   --unique_name <>        Unique identifier   --metadata <>           Metadata file   --fasta <>              Fasta file   --sample_file <>        Name of a file to retrieve: config/metadata/required_columns   Optional flags:   -h, --help      Show help messages and exit.   --config <>     If using a different config file than the default config.                    Provide the full name of the config file stored in config_files folder.   --test          Performs test submission to NCBI. Does not perform test submission to GISAID.                    You must used authenticated CID for test submission to GISAID.   --overwrite     Overwrites an existing submission on NCBI FTP. Used to update errored submissions.   --outdir <>     The output directory to return the file to singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender [-h, --help]                                                                seqsender submit [-h, --help] ...                                                                seqsender prep [-h, --help] ...                                                                seqsender update_submissions [-h, --help] ...                                                                etc. git clone https://github.com/CDCgov/seqsender.git singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender test_bioproject --unique_name test_submission --config /path/to/config_files/test_config.yaml    Submission reports exists pulling down. Test BioProject ID is: <some_bioproject_id> singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender gisaid_uploader COV authenticate  Enter Client-id: TEST-EA76875B00C3 Enter Username: <enter your GISAID username> Enter Password: <enter your GISAID password> singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender prep --unique_name test_submission --config /path/to/config_files/test_config.yaml --metadata /path/to/test_input/test_metadata.tsv --fasta /path/to/test_input/test_fasta.fasta --test singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender submit --unique_name test_submission --config /path/to/config_files/test_config.yaml --metadata /path/to/test_input/test_metadata.tsv --fasta /path/to/test_input/test_fasta.fasta --test singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender gisaid --unique_name test_submission --config /path/to/config_files/test_config.yaml --test singularity run --writable-tmpfs /path/to/seqsender-v1.0.0.sif seqsender update_submissions"},{"path":"https://github.com/nbx0/iSpy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Rambo-Martin. Author, maintainer. Kristine Lacek. Author. Reina Chau. Author.","code":""},{"path":"https://github.com/nbx0/iSpy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rambo-Martin B, Lacek K, Chau R (2023). iSpy: Dash. R package version 1.0, https://github.com/nbx0/iSpy.","code":"@Manual{,   title = {iSpy: Dash},   author = {Ben Rambo-Martin and Kristine Lacek and Reina Chau},   year = {2023},   note = {R package version 1.0},   url = {https://github.com/nbx0/iSpy}, }"},{"path":"https://github.com/nbx0/iSpy/index.html","id":"interactive-dashboard-for-influenza-genome-and-sars-cov-2-spike-gene-assembly-and-curation","dir":"","previous_headings":"","what":"Dash","title":"Dash","text":"Version: 1.0 (Beta) Beta version pipeline currently Beta testing issues appear submission, use risk. Feedback suggestions welcome! General disclaimer repository created use CDC programs collaborate public health related projects support CDC mission. GitHub hosted CDC, third party website used CDC partners share information collaborate software. CDC use GitHub imply endorsement one particular service, product, enterprise.","code":""},{"path":"https://github.com/nbx0/iSpy/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Dash","text":"iSpy interactive dashboard created using Dash, python framework written top Flask, Plotly.js React.js. dashboard allows users interactively create metadata config file Influenza Genome SARS-CoV-2 Spike-Gene Assembly. Subsequently, generate files necessary upload via FTP NCBI’s databases Genbank, BioSample, SRA, well GISAID. flowchart diagram illustrates process Influenza genome SARS-CoV-2 spike-gene assembly curation. words, starts demultiplexed sequencing reads Illumina Oxford Nanopore Technologies sequencer finish high quality genomes ready submission public repositories.","code":""},{"path":"https://github.com/nbx0/iSpy/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"Dash","text":"Dockerize iSpy Connect iSpy containers Convert docker images singularity NGS Training","code":""}]
